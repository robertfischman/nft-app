{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "base_token_uri",
    "num_tokens",
    "sg721_code_id",
    "sg721_instantiate_msg",
    "unit_price"
  ],
  "properties": {
    "base_token_uri": {
      "type": "string"
    },
    "num_tokens": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "sg721_code_id": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "sg721_instantiate_msg": {
      "$ref": "#/definitions/InstantiateMsg"
    },
    "unit_price": {
      "$ref": "#/definitions/Coin"
    }
  },
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CollectionInfo_for_RoyaltyInfoResponse": {
      "type": "object",
      "required": [
        "description",
        "image"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "external_link": {
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "type": "string"
        },
        "royalty_info": {
          "anyOf": [
            {
              "$ref": "#/definitions/RoyaltyInfoResponse"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "InstantiateMsg": {
      "type": "object",
      "required": [
        "collection_info",
        "minter",
        "name",
        "symbol"
      ],
      "properties": {
        "collection_info": {
          "$ref": "#/definitions/CollectionInfo_for_RoyaltyInfoResponse"
        },
        "minter": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      }
    },
    "RoyaltyInfoResponse": {
      "type": "object",
      "required": [
        "payment_address",
        "share"
      ],
      "properties": {
        "payment_address": {
          "type": "string"
        },
        "share": {
          "$ref": "#/definitions/Decimal"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
